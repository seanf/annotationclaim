group 'org.zanata'
version '1.1-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith('SNAPSHOT')
if (isReleaseVersion) {
    ext.sonatypeRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else {
    ext.sonatypeRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
}

ext.nexusUsername = project.hasProperty("nexusUsername") ? nexusUsername : ""
ext.nexusPassword = project.hasProperty("nexusPassword") ? nexusPassword : ""


buildscript {
    repositories {
        mavenCentral()
        //Needed only for SNAPSHOT versions
        //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.mockito:mockito-core:2.8.9'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// allow ./gradlew publishToMavenLocal to work (NB no metadata in pom)
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar {
                classifier "sources"
            }
        }
    }
}


artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(
                url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            snapshotRepository(
                url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }

            // TODO this pom metadata doesn't apply to gradlew install or gradlew publishToMavenLocal
            pom.project {
                //noinspection GroovyAssignabilityCheck
                name 'AnnotationClaim'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Claims annotations at build time to avoid the javac warning: No processor claimed any of these annotations.'
                url 'https://github.com/zanata/annotationclaim'
                inceptionYear '2017'

                scm {
                    connection 'scm:git:git://github.com/zanata/annotationclaim.git'
                    developerConnection 'scm:git:git@github.com:zanata/annotationclaim.git'
                    url 'https://github.com/zanata/annotationclaim'
                }

                licenses {
                    license {
                        //noinspection GroovyAssignabilityCheck
                        name 'Apache License, Version 2.0'
                        url 'https://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id 'sflaniga'
                        //noinspection GroovyAssignabilityCheck
                        name 'Sean Flanigan'
                        email 'sflaniga@redhat.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.zanata"
    //optional if packageGroup == project.getGroup()
    //stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}
